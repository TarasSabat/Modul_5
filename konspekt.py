'''–©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–µ–∫—Å—Ç —ñ–∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è–º —Ä—è–¥–∫—ñ–≤ (–∫–æ–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞)? 
–î–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø–æ—Ç—Ä—ñ–π–Ω–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è–º –ª–∞–ø–æ–∫:'''

# text = """This is first line
# And second line
# Last third line"""

# –∞–±–æ

# one_line_text = "Textual data in Python is handled with str objects, or strings. "\
#                 "Strings are immutable sequences of Unicode code points. "\
#                 "String literals are written in a variety of ways: single quotes, double quotes, triple quoted."

'''Python —Å–ø—Ä–∏–π–º–∞—î —Ä—è–¥–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ, –º—ñ–∂ —è–∫–∏–º–∏ –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ, –∫—Ä—ñ–º –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞/–∞–±–æ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞, —è–∫ –æ–¥–∏–Ω —Ä—è–¥–æ–∫:'''

# ("spam " "eggs") == "spam eggs"  # True

'''–ù–µ–≤–∏–¥–∏–º—ñ (–∫–µ—Ä—É—é—á—ñ) —Å–∏–º–≤–æ–ª–∏. –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è'''

# carriage return

# print('testNew string', end='\n\t')
# print('Hello world',)

'''–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä—è–¥–æ–∫ —ñ –ø—ñ–¥—Å—Ç—Ä–æ–∫—É, –∞ –ø–æ—Ç—ñ–º –≤–∏–∑–Ω–∞—á–∞—î –ø–æ–∑–∏—Ü—ñ—é (—ñ–Ω–¥–µ–∫—Å) –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—Ç—Ä–æ–∫–∏ —É —Ä—è–¥–æ–∫. # –Ø–∫—â–æ –ø—ñ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Ü–µ. 
–ú–µ—Ç–æ–¥ find - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É –≤ —Ä—è–¥–∫—É, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ –∑–±—ñ–≥—ñ–≤ —Ç–æ –ø–æ–≤–µ—Ä–Ω–µ -1
S.find(str, [start], [end]) '''

# main_string = input("–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫: ")
# substring = input("–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—à—É–∫—É: ")
# index = main_string.find(substring)
# if index != -1:
#     print(f'–ü—ñ–¥—Å—Ç—Ä–æ–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: {index}')
# else:
#     print(f'–ü—ñ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')

'''–ú–µ—Ç–æ–¥ rfind - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É –≤ —Ä—è–¥–∫—É –∑ –ø—Ä–∞–≤–∞ –Ω–∞ –ª—ñ–≤–æ, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ –∑–±—ñ–≥—ñ–≤ —Ç–æ –ø–æ–≤–µ—Ä–Ω–µ -1 
S.rfind(str, [start], [end])'''

# s = 'Some words'
# print(s.rfind('o'))

'''–î–∞–Ω–æ —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤. –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞ –≥—Ä—É–ø–∏ —Å–∏–º–≤–æ–ª—ñ–≤ –º—ñ–∂ –¥—É–∂–∫–∞–º–∏ [, ]. –°–∞–º—ñ –¥—É–∂–∫–∏ —Ç–µ–∂ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∫–ª—é—á–µ–Ω—ñ. –ü–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è, —â–æ –≤ –∫–æ–∂–Ω—ñ–π –ø–∞—Ä—ñ –¥—É–∂–æ–∫ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –¥—É–∂–æ–∫.'''

# string = '–í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ [—Ä—è–¥–∫–∞ –≥—Ä—É–ø–∏] —Å–∏–º–≤–æ–ª—ñ–≤, [—Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –º—ñ–∂] –¥—É–∂–∫–∞–º–∏ [, ].'
## –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—ñ–≤, –¥—É–∂–∫–∞–º–∏.
## 1 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤, [—Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –º—ñ–∂] –¥—É–∂–∫–∞–º–∏ [, ].
## 2 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤,  –¥—É–∂–∫–∞–º–∏ [, ].
## 3 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤,  –¥—É–∂–∫–∞–º–∏ .

# start_index = string.find('[')
# end_index = string.find(']')
#
# new_string = string[:start_index] + string[end_index + 1:]
# print(new_string)

# def sanitize(string):
#     new_string = string[:]  # –∫–æ–ø—ñ—è —Å—Ç—Ä–æ–∫–∏
#     while True:
#         start_index = new_string.find('[')
#         end_index = new_string.find(']')
#         if start_index == -1:
#             break
#         new_string = new_string[:start_index] + new_string[end_index+1:]
#     return new_string

# print(sanitize(string))

"""
–ú–µ—Ç–æ–¥: isdigit
‚Äã
–†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ isdigit(), isnumeric() and isdecimal()
+-------------+-----------+-------------+-------------------------------------+
| isdecimal() | isdigit() | isnumeric() |          Example                    |
+-------------+-----------+-------------+-------------------------------------+
|  True       |    True   |    True     | "038", "‡©¶‡©©‡©Æ", "ÔºêÔºìÔºò"              |
|  False      |    True   |    True     | "‚Å∞¬≥‚Å∏", "üÑÄ‚íä‚íè", "‚ì™‚ë¢‚ëß"                |
|  False      |   False   |    True     | "‚Üâ‚Öõ‚Öò", "‚Ö†‚Ö¢‚Öß", "‚ë©‚ë¨„äø", "Â£πË≤≥ÂèÉ"    |
|  False      |   False   |   False     | "abc", "38.0", "-38"                |
+-------------+-----------+-------------+--------------------------------------+
1. –ó–Ω–∞–π—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä —É —Ä—è–¥–∫—É
2. –ó–Ω–∞–π—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª —É —Ä—è–¥–∫—É
"""

# string = "–ù—ñ–ª—å—Å –ë–æ—Ä –Ω–∞—Ä–æ–¥–∏–≤—Å—è –≤ —Ä–æ–¥–∏–Ω—ñ –ø—Ä–æ—Ñ–µ—Å–æ—Ä–∞ —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—ó –ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω—Å—å–∫–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –•—Ä–∏—Å—Ç–∏—è–Ω–∞ –ë–æ—Ä–∞(1858-1911), " \
#          "–π –ï–ª–ª–µ–Ω –ê–¥–ª–µ—Ä (1860-1930). –ë–∞—Ç—å–∫–∏ –ë–æ—Ä–∞ –æ–¥—Ä—É–∂–∏–ª–∏—Å—è 1881 —Ä–æ–∫—É. –ë–∞—Ç—å–∫–∞ –ù—ñ–ª—å—Å–∞ –ë–æ—Ä–∞ –¥–≤—ñ—á—ñ –≤–∏—Å—É–≤–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º " \
#          "–Ω–∞ –ù–æ–±–µ–ª—ñ–≤—Å—å–∫—É –ø—Ä–µ–º—ñ—é –∑ —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—ó –∞–±–æ –º–µ–¥–∏—Ü–∏–Ω–∏[6]. –ú–∞—Ç–∏ –±—É–ª–∞ –¥–æ–Ω—å–∫–æ—é –≤–ø–ª–∏–≤–æ–≤–æ–≥–æ —Ç–∞ –≤–µ–ª—å–º–∏ –∑–∞–º–æ–∂–Ω–æ–≥–æ " \
#          "—î–≤—Ä–µ–π—Å—å–∫–æ–≥–æ –±–∞–Ω–∫—ñ—Ä–∞ —ñ –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞—Ä—è-–ª—ñ–±–µ—Ä–∞–ª–∞ –î–∞–≤–∏–¥–∞ –ë–∞—Ä—É—Ö–∞ –ê–¥–ª–µ—Ä–∞[da] (1826-1878) —ñ –î–∂–µ–Ω–Ω—ñ –†–∞—Ñ–∞–µ–ª (1830-1902) " \
#          "—ñ–∑ –±—Ä–∏—Ç–∞–Ω—Å—å–∫–æ—ó —î–≤—Ä–µ–π—Å—å–∫–æ—ó –±–∞–Ω–∫—ñ—Ä—Å—å–∫–æ—ó –¥–∏–Ω–∞—Å—Ç—ñ—ó Raphael Raphael & sons[en][7]."

# def count_digits(string):
#     count = 0
#     for element in string:
#         if element.isdigit():
#             count += 1
#     return count

# print(count_digits(string))

# def count_numbers(string):
#     count = 0
#     position = 0
#     nums = []
#     while position < len(string):
#         if string[position].isdigit():  # –ø–æ—á–∞—Ç–æ–∫ —á–∏—Å–ª–∞
#             num = ''
#             while position < len(string) and string[position].isdigit():  # —à—É–∫–∞—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∏—Å–ª–∞
#                 num += string[position]  # –∑–∞–ø–∏—Å—É—î–º–æ —á–∏—Å–ª–æ
#                 position += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1
#             nums.append(num)   # –¥–æ–¥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–µ —á–∏—Å–ª–æ –¥–æ —Å–ø–∏—Å–∫—É
#             count += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–∞ 1
#         else:
#             position += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1
#     return count, nums  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä—Ç–µ–∂

# print(count_numbers(string))

"""
–ú–µ—Ç–æ–¥: isdigit
----
–ó–∞–¥–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫, –∫–æ–∂–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º —è–∫–æ–≥–æ —î —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä.
–í–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —ó—Ö —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å —ñ –≤–∏–≤–µ—Å—Ç–∏ –Ω–∞ –µ–∫—Ä–∞–Ω.
–í—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤—ñ–¥–Ω—è—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –Ω–∞ –µ–∫—Ä–∞–Ω.
–ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
"""
# numbers = ['124', '465', '321', '55', 'abc', '211c', '-3']

# def sanitaze(data):
#     result = []
#     for element in data:
#         if element.isdigit():
#             result.append(element)
#     return result


# def transform_to_numbers(data):
#     result = []
#     for element in data:
#         result.append(int(element))
#     return result

# san_nums = sanitaze(numbers)
# print(sorted(san_nums))
# san_nums = transform_to_numbers(san_nums)
# san_nums.sort()
# print(san_nums)
# print(max(san_nums) - min(san_nums))
# print(sum(san_nums) / len(san_nums))

"""
–ú–µ—Ç–æ–¥–∏: split, join
----
–†–æ–∑–±–∏—Ä–∞—î–º–æ URL –∑ Rozetka
"""
# url_query = 'producer=apple;series=iphone-14-pro;41404=256-gb1261112'
# query = url_query.split(';')   # —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ ';'
# print(query)
# ob_query = {}
# for element in query:
#     key, value = element.split('=')
#     ob_query.update({key: value})
# print(ob_query)

# result = []
# for key in ob_query:            # –∑–≤–æ—Ä–æ—Ç–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—è
#     result.append(key + '=' + ob_query[key])
# print(';'.join(result))

"""
–ú–µ—Ç–æ–¥–∏: split, replace - –∑–∞–º—ñ–Ω—è—î '—â–æ—Å—å1' –Ω–∞ '—â–æ—Å—å2'
----
–ü–∞—Ä—Å–∏–º–æ query –∑–∞–ø–∏—Ç –¥–ª—è google. –¢—É—Ç –∫–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ & —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫ —ñ–∑ –¥–∞–Ω–∏–º–∏
"""
# url_search = 'https://www.google.com/search?q=cat+and+dogs&oq=cat+and+dog'
# _, query = url_search.split('?')
# print(query)
# obj_query = {}
# for el in query.split('&'):
#     key, value = el.split('=')
#     obj_query.update({key: value.replace('+', ' ')})
# print(obj_query)

"""
–ú–µ—Ç–æ–¥–∏: strip, removeprefix, replace, format
------
–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
–¢–µ–ª–µ—Ñ–æ–Ω: +380501234567 –î–µ: +380 –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω 501234567
–í–≤–∞–∂–∞—î–º–æ, —â–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π –∑ –∫–æ–¥–æ–º —ñ –±–µ–∑ –∫–æ–¥—É
"""
# phone_storage = ["380669640547", "0637306465 ", " 380961935171", "632643973", "050832520 ", "000000000", "48730283918",
#                  "986223575", "375297947963", "+38(050)123-32-34", "38(050)123 32 34", "38(050)123 32 3b"]

# codes_operators = {"067", "068", "096", "097", "098", "050", "066", "095", "099", "063", "073", "093"}

# def sanitize_phone(phone: str) -> str:
#     new_phone = (phone.strip()
#                  .lstrip('+') # –∞–±–æ 
#                  # .removeprefix('+')
#                  .replace('(', '')
#                  .replace(')', '')
#                  .replace(' ', '')
#                  .replace('-', '')
#                  )
#     return new_phone


# def is_valid_phone(phone: str) -> bool:
#     def is_valid_operator(phone: str) -> bool:
#         if phone[:3] in codes_operators:
#             return True
#         return False

#     if phone.isdigit():
#         if len(phone) == 12:
#             if phone[:2] == '38':
#                 return is_valid_operator(phone[2:])
#         elif len(phone) == 10:
#             return is_valid_operator(phone)
#     return False

# if __name__ == "__main__":
#     for phone in phone_storage:
#         phone = sanitize_phone(phone)
#         if is_valid_phone(phone):
#             print('Phone: {:>12} is valid'.format(phone))
#         else:
#             print('Phone: {:>12} is invalid'.format(phone))

"""
–ú–µ—Ç–æ–¥ translate
"""

# data = '—é–±—â—Å'
# symbol_map = {
#     ord('—é'): 'u',
#     ord('–±'): 'b',
#     ord('—â'): 'shch',
#     ord('—Å'): 's',
# }

# new_str = data.translate(symbol_map)
# print(new_str)

"""
–ú–µ—Ç–æ–¥: Translate
"""

# morze_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', ord('D'): '-..', ord('E'): '.', 'F': '..-.',
#               'G': '--.', ord('H'): '....', 'I': '..', 'J': '.---', 'K': '-.-', ord('L'): '.-..',
#               'M': '--', 'N': '-.', ord('O'): '---', 'P': '.--.', 'Q': '--.-', ord('R'): '.-.',
#               'S': '...', 'T': '-', 'U': '..-', 'V': '...-', ord('W'): '.--', 'X': '-..-',
#               'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
#               '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
#               '8': '---..', '9': '----.'}
# string = 'Hello world'
# data = []
# for ch in string:
#     data.append(ch.upper().translate(morze_dict))
# translated = ' | '.join(data)
# print(translated)


'''
–ú–µ—Ç–æ–¥ format
------------
< - —Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –ª—ñ–≤–æ–º—É –∫—Ä–∞—é
> - —Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
^ - —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
------------  
–ü–µ—Ä—à–∞ —Ü–∏—Ñ—Ä–∞ —É –Ω–æ–º–µ—Ä—ñ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –æ–∑–Ω–∞—á–∞—î, –¥–æ —è–∫–æ—ó –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å. –£—Å—ñ –∫–∞—Ä—Ç–∫–∏ Visa –º–∞—é—Ç—å
–Ω–æ–º–µ—Ä, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–∞ "4", Mastercard - –Ω–∞ "5", –∞ American Express - "3". –Ø–∫—â–æ –∫–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–∞ –Ω–µ –∫—Ä–µ–¥–∏—Ç–Ω–∞
–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è, –Ω–æ–º–µ—Ä –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ —ñ–Ω—à–∏—Ö —Ü–∏—Ñ—Ä. "1" —ñ "2" - —Ü–µ —Ä—ñ–∑–Ω—ñ –∞–≤—ñ–∞–ª—ñ–Ω—ñ—ó, "3" - –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ñ–µ—Ä–∏
–ø–æ–¥–æ—Ä–æ–∂–µ–π —Ç–∞ —Ä–æ–∑–≤–∞–≥, ¬´6¬ª - –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥–æ–≤—ñ –∫–æ–º–ø–∞–Ω—ñ—ó, ¬´7¬ª - –ø–∞–ª–∏–≤–Ω—ñ, ¬´8¬ª - –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —É —Å—Ñ–µ—Ä—ñ
—Ç–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π, –∞ ¬´9¬ª - —Ü–µ –¥–µ—Ä–∂–∞–≤–Ω—ñ –∞—Å–∏–≥–Ω–∞—Ü—ñ—ó.
'''
# pay_system = {
#     5: 'MasterCard',
#     4: 'Visa',
#     3: 'American Express'
# }

# card_numbers = ['5375414112345678', '4168757587879876', '216875758787987b']

# def is_valid_card(card):
#     return card.isdigit() and len(card) == 16

# for card in card_numbers:
#     string = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ {:,<8} –ü–ª–∞—Ç—ñ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {:^16} –∫–∞—Ä—Ç–∫–∞ –≤–∞–ª—ñ–¥–Ω–∞: {:>16}'
#     print(string.format(card, pay_system.get(int(card[0]), 'Unknown'), str(is_valid_card(card))))

"""
–ú–µ—Ç–æ–¥: format
------
–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
–¢–µ–ª–µ—Ñ–æ–Ω: +380501234567 –î–µ: +380 –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω 501234567
–í–≤–∞–∂–∞—î–º–æ, —â–æ –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π –∑ –∫–æ–¥–æ–º —ñ –±–µ–∑ –∫–æ–¥—É
"""
phone_storage = ["380669640547", "0637306465 ", " 380961935171", "632643973", "050832520 ",
                 "000000000", "48730283918", "986223575", "375297947963", "+38(050)123-32-34", "38(050)123 32 34",
                 "38(050)123 32 3b"]

codes_operators = {"067", "068", "096", "097", "098",
                   "050", "066", "095", "099", "063", "073", "093"}

from for_import import sanitize_phone, is_valid_phone

if __name__ == "__main__":
    print('|{:^14}|{:^12}|'.format('–¢–µ–ª–µ—Ñ–æ–Ω', '–†–µ–∑—É–ª—å—Ç–∞—Ç'))
    print('|{:^14}|{:^12}|'.format('-' * 13 + ':', ':' + '-' * 10 + ':'))
    for phone in phone_storage:
        phone = sanitize_phone(phone)
        if is_valid_phone(phone):
            print('|{:>14}|{:^12}|'.format(phone, 'valid'))
        else:
            print('|{:>14}|{:^12}|'.format(phone, 'not valid'))


"""
–Ñ 2 —Å–ø–∏—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: –ø–µ—Ä—à–∏–π - —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π, –¥—Ä—É–≥–∏–π - —Ç–∏—Ö, —Ö—Ç–æ –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –≥—Ä–∏.
–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ç–∏—Ö, —Ö—Ç–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è, –∞–ª–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É –Ω–∞ —Å–∞–π—Ç—ñ.
["380669640547", "0637306465", "380961935171", "632643973", "508325200", "000000000", "48730283918", "986223575", "375297947963"]
["380669640547", "0637306465" "632643973", "508325200", "48730283918", "986223575"]
"""

# ‚Äãregistration = ["380669640547", "0637306465", "380961935171", "632643973", "508325200", "000000000", "48730283918", "986223575", "375297947963"]
# connect = ["380669640547", "0637306465" "632643973", "508325200", "48730283918", "986223575"]