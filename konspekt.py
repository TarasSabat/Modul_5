'''–©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–µ–∫—Å—Ç —ñ–∑ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è–º —Ä—è–¥–∫—ñ–≤ (–∫–æ–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞)? 
–î–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø–æ—Ç—Ä—ñ–π–Ω–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è–º –ª–∞–ø–æ–∫:'''

# text = """This is first line
# And second line
# Last third line"""

# –∞–±–æ

# one_line_text = "Textual data in Python is handled with str objects, or strings. "\
#                 "Strings are immutable sequences of Unicode code points. "\
#                 "String literals are written in a variety of ways: single quotes, double quotes, triple quoted."

'''Python —Å–ø—Ä–∏–π–º–∞—î —Ä—è–¥–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ, –º—ñ–∂ —è–∫–∏–º–∏ –Ω–µ–º–∞—î –Ω—ñ—á–æ–≥–æ, –∫—Ä—ñ–º –ø—Ä–æ–±—ñ–ª—ñ–≤ —Ç–∞/–∞–±–æ —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞, —è–∫ –æ–¥–∏–Ω —Ä—è–¥–æ–∫:'''

# ("spam " "eggs") == "spam eggs"  # True

'''–ù–µ–≤–∏–¥–∏–º—ñ (–∫–µ—Ä—É—é—á—ñ) —Å–∏–º–≤–æ–ª–∏. –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è'''

# carriage return

# print('testNew string', end='\n\t')
# print('Hello world',)

'''–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä—è–¥–æ–∫ —ñ –ø—ñ–¥—Å—Ç—Ä–æ–∫—É, –∞ –ø–æ—Ç—ñ–º –≤–∏–∑–Ω–∞—á–∞—î –ø–æ–∑–∏—Ü—ñ—é (—ñ–Ω–¥–µ–∫—Å) –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Å—Ç—Ä–æ–∫–∏ —É —Ä—è–¥–æ–∫. # –Ø–∫—â–æ –ø—ñ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≥—Ä–∞–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —Ü–µ. 
–ú–µ—Ç–æ–¥ find - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É –≤ —Ä—è–¥–∫—É, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ –∑–±—ñ–≥—ñ–≤ —Ç–æ –ø–æ–≤–µ—Ä–Ω–µ -1
S.find(str, [start], [end]) '''

# main_string = input("–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫: ")
# substring = input("–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—à—É–∫—É: ")
# index = main_string.find(substring)
# if index != -1:
#     print(f'–ü—ñ–¥—Å—Ç—Ä–æ–∫–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: {index}')
# else:
#     print(f'–ü—ñ–¥—Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞')

'''–ú–µ—Ç–æ–¥ rfind - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É –≤ —Ä—è–¥–∫—É –∑ –ø—Ä–∞–≤–∞ –Ω–∞ –ª—ñ–≤–æ, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ –∑–±—ñ–≥—ñ–≤ —Ç–æ –ø–æ–≤–µ—Ä–Ω–µ -1 
S.rfind(str, [start], [end])'''

# s = 'Some words'
# print(s.rfind('o'))

'''–î–∞–Ω–æ —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤. –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞ –≥—Ä—É–ø–∏ —Å–∏–º–≤–æ–ª—ñ–≤ –º—ñ–∂ –¥—É–∂–∫–∞–º–∏ [, ]. –°–∞–º—ñ –¥—É–∂–∫–∏ —Ç–µ–∂ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∫–ª—é—á–µ–Ω—ñ. –ü–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è, —â–æ –≤ –∫–æ–∂–Ω—ñ–π –ø–∞—Ä—ñ –¥—É–∂–æ–∫ –Ω–µ–º–∞—î —ñ–Ω—à–∏—Ö –¥—É–∂–æ–∫.'''

# string = '–í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ [—Ä—è–¥–∫–∞ –≥—Ä—É–ø–∏] —Å–∏–º–≤–æ–ª—ñ–≤, [—Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –º—ñ–∂] –¥—É–∂–∫–∞–º–∏ [, ].'
# # –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ —Å–∏–º–≤–æ–ª—ñ–≤, –¥—É–∂–∫–∞–º–∏.
# # 1 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤, [—Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –º—ñ–∂] –¥—É–∂–∫–∞–º–∏ [, ].
# # 2 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤,  –¥—É–∂–∫–∞–º–∏ [, ].
# # 3 —ñ—Ç–µ—Ä–∞—Ü—ñ—è —Ü–∏–∫–ª—É-> –í–∏–∫–ª—é—á–∏—Ç–∏ –∑ —Ü—å–æ–≥–æ  —Å–∏–º–≤–æ–ª—ñ–≤,  –¥—É–∂–∫–∞–º–∏ .

# start_index = string.find('[')
# end_index = string.find(']')

# new_string = string[:start_index] + string[end_index + 1:]
# print(new_string)

# def sanitize(string):
#     new_string = string[:]  # –∫–æ–ø—ñ—è —Å—Ç—Ä–æ–∫–∏
#     while True:
#         start_index = new_string.find('[')
#         end_index = new_string.find(']')
#         if start_index == -1:
#             break
#         new_string = new_string[:start_index] + new_string[end_index+1:]
#     return new_string

# print(sanitize(string))

"""
–ú–µ—Ç–æ–¥: isdigit
‚Äã
–†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ isdigit(), isnumeric() and isdecimal()
+-------------+-----------+-------------+-------------------------------------+
| isdecimal() | isdigit() | isnumeric() |          Example                    |
+-------------+-----------+-------------+-------------------------------------+
|  True       |    True   |    True     | "038", "‡©¶‡©©‡©Æ", "ÔºêÔºìÔºò"              |
|  False      |    True   |    True     | "‚Å∞¬≥‚Å∏", "üÑÄ‚íä‚íè", "‚ì™‚ë¢‚ëß"                |
|  False      |   False   |    True     | "‚Üâ‚Öõ‚Öò", "‚Ö†‚Ö¢‚Öß", "‚ë©‚ë¨„äø", "Â£πË≤≥ÂèÉ"    |
|  False      |   False   |   False     | "abc", "38.0", "-38"                |
+-------------+-----------+-------------+--------------------------------------+
1. –ó–Ω–∞–π—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏—Ñ—Ä —É —Ä—è–¥–∫—É
2. –ó–Ω–∞–π—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª —É —Ä—è–¥–∫—É
"""

# string = "–ù—ñ–ª—å—Å –ë–æ—Ä –Ω–∞—Ä–æ–¥–∏–≤—Å—è –≤ —Ä–æ–¥–∏–Ω—ñ –ø—Ä–æ—Ñ–µ—Å–æ—Ä–∞ —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—ó –ö–æ–ø–µ–Ω–≥–∞–≥–µ–Ω—Å—å–∫–æ–≥–æ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É –•—Ä–∏—Å—Ç–∏—è–Ω–∞ –ë–æ—Ä–∞(1858-1911), " \
#          "–π –ï–ª–ª–µ–Ω –ê–¥–ª–µ—Ä (1860-1930). –ë–∞—Ç—å–∫–∏ –ë–æ—Ä–∞ –æ–¥—Ä—É–∂–∏–ª–∏—Å—è 1881 —Ä–æ–∫—É. –ë–∞—Ç—å–∫–∞ –ù—ñ–ª—å—Å–∞ –ë–æ—Ä–∞ –¥–≤—ñ—á—ñ –≤–∏—Å—É–≤–∞–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º " \
#          "–Ω–∞ –ù–æ–±–µ–ª—ñ–≤—Å—å–∫—É –ø—Ä–µ–º—ñ—é –∑ —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—ó –∞–±–æ –º–µ–¥–∏—Ü–∏–Ω–∏[6]. –ú–∞—Ç–∏ –±—É–ª–∞ –¥–æ–Ω—å–∫–æ—é –≤–ø–ª–∏–≤–æ–≤–æ–≥–æ —Ç–∞ –≤–µ–ª—å–º–∏ –∑–∞–º–æ–∂–Ω–æ–≥–æ " \
#          "—î–≤—Ä–µ–π—Å—å–∫–æ–≥–æ –±–∞–Ω–∫—ñ—Ä–∞ —ñ –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞—Ä—è-–ª—ñ–±–µ—Ä–∞–ª–∞ –î–∞–≤–∏–¥–∞ –ë–∞—Ä—É—Ö–∞ –ê–¥–ª–µ—Ä–∞[da] (1826-1878) —ñ –î–∂–µ–Ω–Ω—ñ –†–∞—Ñ–∞–µ–ª (1830-1902) " \
#          "—ñ–∑ –±—Ä–∏—Ç–∞–Ω—Å—å–∫–æ—ó —î–≤—Ä–µ–π—Å—å–∫–æ—ó –±–∞–Ω–∫—ñ—Ä—Å—å–∫–æ—ó –¥–∏–Ω–∞—Å—Ç—ñ—ó Raphael Raphael & sons[en][7]."

# def count_digits(string):
#     count = 0
#     for element in string:
#         if element.isdigit():
#             count += 1
#     return count

# print(count_digits(string))

# def count_numbers(string):
#     count = 0
#     position = 0
#     nums = []
#     while position < len(string):
#         if string[position].isdigit():  # –ø–æ—á–∞—Ç–æ–∫ —á–∏—Å–ª–∞
#             num = ''
#             while position < len(string) and string[position].isdigit():  # —à—É–∫–∞—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∏—Å–ª–∞
#                 num += string[position]  # –∑–∞–ø–∏—Å—É—î–º–æ —á–∏—Å–ª–æ
#                 position += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1
#             nums.append(num)   # –¥–æ–¥–∞—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–µ —á–∏—Å–ª–æ –¥–æ —Å–ø–∏—Å–∫—É
#             count += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–∞ 1
#         else:
#             position += 1  # –∑–±—ñ–ª—å—à—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ 1
#     return count, nums  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä—Ç–µ–∂

# print(count_numbers(string))

"""
–ú–µ—Ç–æ–¥: isdigit
----
–ó–∞–¥–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫, –∫–æ–∂–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º —è–∫–æ–≥–æ —î —Ä—è–¥–æ–∫ —Å–∏–º–≤–æ–ª—ñ–≤, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –æ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä.
–í–ø–æ—Ä—è–¥–∫—É–≤–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —ó—Ö —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å —ñ –≤–∏–≤–µ—Å—Ç–∏ –Ω–∞ –µ–∫—Ä–∞–Ω.
–í—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –≤—ñ–¥–Ω—è—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ç–∞ –≤–∏–≤–µ—Å—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é –Ω–∞ –µ–∫—Ä–∞–Ω.
–ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
"""
# numbers = ['124', '465', '321', '55', 'abc', '211c', '-3']

# def sanitaze(data):
#     result = []
#     for element in data:
#         if element.isdigit():
#             result.append(element)
#     return result


# def transform_to_numbers(data):
#     result = []
#     for element in data:
#         result.append(int(element))
#     return result

# san_nums = sanitaze(numbers)
# print(sorted(san_nums))
# san_nums = transform_to_numbers(san_nums)
# san_nums.sort()
# print(san_nums)
# print(max(san_nums) - min(san_nums))
# print(sum(san_nums) / len(san_nums))

"""
–ú–µ—Ç–æ–¥–∏: split, join
----
–†–æ–∑–±–∏—Ä–∞—î–º–æ URL –∑ Rozetka
"""
# url_query = 'producer=apple;series=iphone-14-pro;41404=256-gb1261112'
# query = url_query.split(';')   # —Ä–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ ';'
# print(query)
# ob_query = {}
# for element in query:
#     key, value = element.split('=')
#     ob_query.update({key: value})
# print(ob_query)

# result = []
# for key in ob_query:            # –∑–≤–æ—Ä–æ—Ç–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—è
#     result.append(key + '=' + ob_query[key])
# print(';'.join(result))

"""
–ú–µ—Ç–æ–¥–∏: split, replace - –∑–∞–º—ñ–Ω—è—î '—â–æ—Å—å1' –Ω–∞ '—â–æ—Å—å2'
–ö–æ–ª–∏ –Ω–∞–º —Ç—Ä–µ–±–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –¥–µ—è–∫–∏–π –ø—ñ–¥—Ä—è–¥–æ–∫ —É —Ä—è–¥–∫—É –º–∏ –º–æ–∂–µ–º–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –º–µ—Ç–æ–¥–æ–º replace:

message = "–£ —Ç–µ–º–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –≤—Å—ñ –∫—ñ—à–∫–∏ —á–æ—Ä–Ω—ñ (–º–∞–±—É—Ç—å)"
square_brackets = message.replace("(", "[").replace(")", "]")
clear_brackets = message.replace("(", "").replace(")", "")

print(square_brackets)  # –£ —Ç–µ–º–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –≤—Å—ñ –∫—ñ—à–∫–∏ —á–æ—Ä–Ω—ñ [–º–∞–±—É—Ç—å]
print(clear_brackets)  # –£ —Ç–µ–º–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ –≤—Å—ñ –∫—ñ—à–∫–∏ —á–æ—Ä–Ω—ñ –º–∞–±—É—Ç—å
–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ä—è–¥–∫–∞ —î –º–µ—Ç–æ–¥ removeprefix:

print('TestHook'.removeprefix('Test'))  # Hook
print('TestHook'.removeprefix('Hook'))  # TestHook
–Ñ –ø–∞—Ä–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –≤ –∫—ñ–Ω—Ü—ñ —Ä—è–¥–∫–∞, removesuffix:

print('TestHook'.removesuffix('Hook'))  # Test
print('TestHook'.removesuffix('Test'))  # TestHook
----
–ü–∞—Ä—Å–∏–º–æ query –∑–∞–ø–∏—Ç –¥–ª—è google. –¢—É—Ç –∫–ª–∞—Å–∏—á–Ω–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ & —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ª–æ–≤–Ω–∏–∫ —ñ–∑ –¥–∞–Ω–∏–º–∏
"""
# url_search = 'https://www.google.com/search?q=cat+and+dogs&oq=cat+and+dog'
# _, query = url_search.split('?')
# print(query)
# obj_query = {}
# for el in query.split('&'):
#     key, value = el.split('=')
#     obj_query.update({key: value.replace('+', ' ')})
# print(obj_query)

"""
–ú–µ—Ç–æ–¥–∏: strip, removeprefix, replace, format
–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∏ —É –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—é —Ä—è–¥–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –º–µ—Ç–æ–¥ rstrip:

name = "Avril Lavigne        "
print(name.rstrip())  # Avril Lavigne
–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –±—ñ–ª—è –ª—ñ–≤–æ–≥–æ –∫—Ä–∞—é —Ä—è–¥–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –º–µ—Ç–æ–¥ lstrip:

name = "         Avril Lavigne"
print(name.lstrip())  # Avril Lavigne
–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –∑ –æ–±–æ—Ö –±–æ–∫—ñ–≤ —Ä—è–¥–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –º–µ—Ç–æ–¥ strip:

name = "         Avril Lavigne          "
print(name.strip())  # Avril Lavigne
------
–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
–¢–µ–ª–µ—Ñ–æ–Ω: +380501234567 –î–µ: +380 –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω 501234567
–í–≤–∞–∂–∞—î–º–æ, —â–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π –∑ –∫–æ–¥–æ–º —ñ –±–µ–∑ –∫–æ–¥—É
"""
# phone_storage = ["380669640547", "0637306465 ", " 380961935171", "632643973", "050832520 ", "000000000", "48730283918",
#                  "986223575", "375297947963", "+38(050)123-32-34", "38(050)123 32 34", "38(050)123 32 3b"]

# codes_operators = {"067", "068", "096", "097", "098", "050", "066", "095", "099", "063", "073", "093"}

# def sanitize_phone(phone: str) -> str:
#     new_phone = (phone.strip()
#                  .lstrip('+') # –∞–±–æ 
#                  # .removeprefix('+')
#                  .replace('(', '')
#                  .replace(')', '')
#                  .replace(' ', '')
#                  .replace('-', '')
#                  )
#     return new_phone


# def is_valid_phone(phone: str) -> bool:
#     def is_valid_operator(phone: str) -> bool:
#         if phone[:3] in codes_operators:
#             return True
#         return False

#     if phone.isdigit():
#         if len(phone) == 12:
#             if phone[:2] == '38':
#                 return is_valid_operator(phone[2:])
#         elif len(phone) == 10:
#             return is_valid_operator(phone)
#     return False

# if __name__ == "__main__":
#     for phone in phone_storage:
#         phone = sanitize_phone(phone)
#         if is_valid_phone(phone):
#             print('Phone: {:>12} is valid'.format(phone))
#         else:
#             print('Phone: {:>12} is invalid'.format(phone))

"""
–ú–µ—Ç–æ–¥ translate

–ú–µ—Ç–æ–¥ translate —É Python –¥–æ–∑–≤–æ–ª—è—î –∑–∞–º—ñ–Ω–∏—Ç–∏ —Å–∏–º–≤–æ–ª —É —Ä—è–¥–∫—É –Ω–∞ —ñ–Ω—à–∏–π –∑ –∫–∞—Ä—Ç–∏ (—Ç–∞–±–ª–∏—Ü—ñ) –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ, –∫–æ—Ç—Ä—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏. –Ø–∫—â–æ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ ASCII –∫–æ–¥–∏ –∑–∞–º—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤.

–ü—Ä–∏–∫–ª–∞–¥:
replace_dict = {117: "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
–©–æ —Å—Ç–∞–ª–æ—Å—è? –ú–∏ –∑–∞–º—ñ–Ω–∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ —Å–∏–º–≤–æ–ª "u" –Ω–∞ —Å–∏–º–≤–æ–ª "o". –ó–Ω–∞—á–µ–Ω–Ω—è 117 ‚Äî —Ü–µ ASCII –∫–æ–¥ —Å–∏–º–≤–æ–ª—É 'u', —è–∫–µ, —è–∫ –∑–Ω–∞—î–º–æ, –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó ord("u").

replace_dict = {ord("u"): "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
–¢–∞–∫–∏–º —á–∏–Ω–æ–º translate() ‚Äì –º–µ—Ç–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫, –¥–µ –¥–µ—è–∫—ñ –∑–∞–¥–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑–∞–º—ñ–Ω—é—é—Ç—å—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª–∏, –æ–ø–∏—Å–∞–Ω—ñ —É —Å–ª–æ–≤–Ω–∏–∫—É, –∞–±–æ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —É —Å–ª–æ–≤–Ω–∏–∫—É/—Ç–∞–±–ª–∏—Ü—ñ, —Å–∏–º–≤–æ–ª –Ω–µ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ maketrans.

txt = "sun"
my_table = txt.maketrans("u", "o")
print(txt.translate(my_table))  # son
–ú–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–±—ñ—Ä –¥–ª—è –∑–∞–º—ñ–Ω

txt = "sun"
my_table = txt.maketrans("nus", "mot")
print(txt.translate(my_table))  # tom
–¢—Ä–µ—Ç—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É—î —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ —Ä—è–¥–∫–∞:

txt = "the sun"
my_table = txt.maketrans("nus", "nos", "he t")
print(txt.translate(my_table))  # son
–Ø–∫—â–æ –º–∏ –∑–±–∏—Ä–∞—î–º–æ—Å—è —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ –∫–∏—Ä–∏–ª–∏—Ü—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—é, —É –Ω–∞—Å –º–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó —Å–ª–æ–≤–∞ "—á–∞—à–∞", —è–∫–µ –º–∞—î –±—É—Ç–∏ "chasha" —ñ –º–∞—î –¥–æ–≤–∂–∏–Ω—É –Ω–∞ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∏ –±—ñ–ª—å—à–µ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è maketrans –≤–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É. –Ø–∫ –±—É—Ç–∏?

–î–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é zip, —è–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —á–∏—Å–ª–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∏, —â–æ —ñ—Ç–µ—Ä—É—é—Ç—å—Å—è –≤ —î–¥–∏–Ω–∏–π –æ–±'—î–∫—Ç –∫–æ—Ä—Ç–µ–∂—ñ–≤, —â–æ —ñ—Ç–µ—Ä—É—î—Ç—å—Å—è, —Ç–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:

CYRILLIC = ("–∞", "—á", "—à")
LATIN = ("a", "ch", "sh")

TRANSLIT_DICT = {}

for c, l in zip(CYRILLIC, LATIN):
    TRANSLIT_DICT[ord(c)] = l
    TRANSLIT_DICT[ord(c.upper())] = l.upper()

print("—á–∞—à–∞".translate(TRANSLIT_DICT))  # chasha
print("–ß–ê–®–ê".translate(TRANSLIT_DICT))  # CHASHA
–¢–∞–∫ —à–≤–∏–¥–∫–æ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ —Å–ø–∏—Å–∫–∏ –º–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ –¥–æ–≤–∂–∏–Ω–∏, —Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è zip –ø—Ä–∏–ø–∏–Ω–∏—Ç—å —Ä–æ–±–æ—Ç—É, —â–æ–π–Ω–æ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –ø–µ—Ä—à–∏–π —ñ–∑ –Ω–∏—Ö.
"""

# data = '—é–±—â—Å'
# symbol_map = {
#     ord('—é'): 'u',
#     ord('–±'): 'b',
#     ord('—â'): 'shch',
#     ord('—Å'): 's',
# }

# new_str = data.translate(symbol_map)
# print(new_str)

"""
–ú–µ—Ç–æ–¥: Translate
"""

# morze_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', ord('D'): '-..', ord('E'): '.', 'F': '..-.',
#               'G': '--.', ord('H'): '....', 'I': '..', 'J': '.---', 'K': '-.-', ord('L'): '.-..',
#               'M': '--', 'N': '-.', ord('O'): '---', 'P': '.--.', 'Q': '--.-', ord('R'): '.-.',
#               'S': '...', 'T': '-', 'U': '..-', 'V': '...-', ord('W'): '.--', 'X': '-..-',
#               'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
#               '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
#               '8': '---..', '9': '----.'}
# string = 'Hello world'
# data = []
# for ch in string:
#     data.append(ch.upper().translate(morze_dict))
# translated = ' | '.join(data)
# print(translated)


'''
–ú–µ—Ç–æ–¥ format
------------
< - —Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –ª—ñ–≤–æ–º—É –∫—Ä–∞—é
> - —Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
^ - —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
------------  
–ü–µ—Ä—à–∞ —Ü–∏—Ñ—Ä–∞ —É –Ω–æ–º–µ—Ä—ñ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ—ó –∫–∞—Ä—Ç–∫–∏ –æ–∑–Ω–∞—á–∞—î, –¥–æ —è–∫–æ—ó –ø–ª–∞—Ç—ñ–∂–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤–æ–Ω–∞ –Ω–∞–ª–µ–∂–∏—Ç—å. –£—Å—ñ –∫–∞—Ä—Ç–∫–∏ Visa –º–∞—é—Ç—å
–Ω–æ–º–µ—Ä, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –Ω–∞ "4", Mastercard - –Ω–∞ "5", –∞ American Express - "3". –Ø–∫—â–æ –∫–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–∞ –Ω–µ –∫—Ä–µ–¥–∏—Ç–Ω–∞
–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è, –Ω–æ–º–µ—Ä –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ —ñ–Ω—à–∏—Ö —Ü–∏—Ñ—Ä. "1" —ñ "2" - —Ü–µ —Ä—ñ–∑–Ω—ñ –∞–≤—ñ–∞–ª—ñ–Ω—ñ—ó, "3" - –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Å—Ñ–µ—Ä–∏
–ø–æ–¥–æ—Ä–æ–∂–µ–π —Ç–∞ —Ä–æ–∑–≤–∞–≥, ¬´6¬ª - –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥–æ–≤—ñ –∫–æ–º–ø–∞–Ω—ñ—ó, ¬´7¬ª - –ø–∞–ª–∏–≤–Ω—ñ, ¬´8¬ª - –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞ —É —Å—Ñ–µ—Ä—ñ
—Ç–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π, –∞ ¬´9¬ª - —Ü–µ –¥–µ—Ä–∂–∞–≤–Ω—ñ –∞—Å–∏–≥–Ω–∞—Ü—ñ—ó.
'''
# pay_system = {
#     5: 'MasterCard',
#     4: 'Visa',
#     3: 'American Express'
# }

# card_numbers = ['5375414112345678', '4168757587879876', '216875758787987b']

# def is_valid_card(card):
#     return card.isdigit() and len(card) == 16

# for card in card_numbers:
#     string = '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏ {:,<8} –ü–ª–∞—Ç—ñ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {:^16} –∫–∞—Ä—Ç–∫–∞ –≤–∞–ª—ñ–¥–Ω–∞: {:>16}'
#     print(string.format(card, pay_system.get(int(card[0]), 'Unknown'), str(is_valid_card(card))))

"""
–ú–µ—Ç–æ–¥: format
–ë—É–¥—å-—è–∫–µ —á–∏—Å–ª–æ –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ –∫—ñ–ª—å–∫–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –∑–∞–ø–∏—Å—É:
- –¥–µ—Å—è—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Å
- –¥–≤—ñ–π–∫–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
- —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∏—Ä–∏—á–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
- –Ω–∞—É–∫–æ–≤–∞ –Ω–æ—Ç–∞—Ü—ñ—è
- –∑ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—é —Ç–æ—á–Ω—ñ—Å—Ç—é (–∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏) —Ç–∞ —ñ–Ω—à—ñ.
–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 15 –≤ –¥–µ—Å—è—Ç–∫–æ–≤–æ–º—É, —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∏—Ä–∏—á–Ω–æ–º—É, –≤—ñ—Å—ñ–º–∫–æ–≤–æ–º—É —ñ –¥–≤—ñ–π–∫–æ–≤–æ–º—É —É—è–≤–ª–µ–Ω–Ω—ñ:
for i in range(16):
    s = "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(i)
    print(s)
–ö—Ä—ñ–º —Ç–æ–≥–æ, –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ä—è–¥–∫—ñ–≤ –±—É–≤–∞—î –∫–æ—Ä–∏—Å–Ω–∏–º –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Ä—è–¥–æ–∫ —Ç–∞–∫, —â–æ–± –∑–Ω–∞–∫–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—è–¥–∫–∞—Ö –±—É–ª–∏ –æ–¥–∏–Ω –ø—ñ–¥ –æ–¥–Ω–∏–º (–¥–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤), –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤ —Ä—è–¥–∫–∏ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–≤ –∑–∞–≤–∂–¥–∏ –æ–¥–Ω—ñ—î—ó —ñ —Ç—ñ—î—ó –∂ –¥–æ–≤–∂–∏–Ω–∏.
–î–ª—è —Ç–∞–∫–∏—Ö —ñ –ø–æ–¥—ñ–±–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤ Python –≤–±—É–¥–æ–≤–∞–Ω–∞ –º—ñ–Ω—ñ-–º–æ–≤–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ .
–ê–±–æ –≤–∏–≤–µ—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏ —Ç–∞ –∫—É–±–∏ —á–∏—Å–µ–ª –¥–æ 12 —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ, –≤—ñ–¥—Ü–µ–Ω—Ç—Ä—É–≤–∞–≤—à–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —É —Å—Ç–æ–≤–ø—Ü—è—Ö –ø–æ 10 —Å–∏–º–≤–æ–ª—ñ–≤ —à–∏—Ä–∏–Ω–æ—é:
width = 5
for num in range(12):
    print('{:^10} {:^10} {:^10}'.format(num, num ** 2, num ** 3))
–ú–µ—Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑ –º–µ—Ç–∞–º–æ–≤–æ—é —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—è–≥–∞—î —É –≤–∫–∞–∑—ñ–≤—Ü—ñ —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö, —è–∫–∏–º —á–∏–Ω–æ–º —Å–ª—ñ–¥ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ—é. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î —ñ –∑ f-—Ä—è–¥–∫–∞–º–∏, –∞–ª–µ –¥–ª—è –±—ñ–ª—å—à—ñ–π —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ –∫—Ä–∞—â–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –º–µ—Ç–æ–¥–æ–º format, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ä—è–¥–æ–∫, –∑–∞–º—ñ—Å—Ç—å –≤–∏—Ä–∞–∑—ñ–≤ —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö.
–°–∞–º—ñ –≤–∏—Ä–∞–∑–∏ —É —Ñ—ñ–≥—É—Ä–Ω–∏—Ö –¥—É–∂–∫–∞—Ö –º–æ–∂—É—Ç—å —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ –æ–ø–∏—Å—É, –≤ —è–∫–æ–º—É –≤–∏–¥—ñ —Å–ª—ñ–¥ –≤–∏–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (—Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å—É, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞–∫—ñ–≤ –ø—ñ—Å–ª—è –∫–æ–º–∏ —Ç–∞ —ñ–Ω.), —ñ –≤–∫–∞–∑—ñ–≤–∫–∏, —á–∏–º –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä—è–¥–æ–∫ (–¥–æ–¥–∞—Ç–∏ –ø—Ä–æ–ø—É—Å–∫—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∞–±–æ —É –∫—ñ–Ω—Ü—ñ, —â–æ–± —Ä—è–¥–æ–∫ –±—É–≤ N –∑–Ω–∞–∫—ñ–≤ –∑–∞–≤–¥–æ–≤–∂–∫–∏ —ñ —Ç.–ø.).
---------
–ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏
–ú—ñ–Ω—ñ-–º–æ–≤–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ç–∞–∫–∏—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤, —è–∫:
- —ñ–º'—è –ø–æ–ª—è ‚Äî –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç, –º–æ–∂–µ–º–æ –≤–∫–∞–∑–∞—Ç–∏ —è–∫—É —Å–∞–º–µ –∑–º—ñ–Ω–Ω—É —Å—é–¥–∏ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ —ó—ó —ñ–º–µ–Ω—ñ:
s = "{name} {last_name}".format(last_name="Dilan", name="Bob")
print(s)  # Bob Dilan
- –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è ‚Äî –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤–∫–∞–∑—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Å–∏–º–≤–æ–ª—É ! —ñ –º–æ–∂–µ –±—É—Ç–∏ –∞–±–æ r –∞–±–æ s. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ç–µ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç, –∞–±–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç "—è–∫ —î":
s = "{name!r} {last_name!s}".format(last_name="Dilan", name="Bob")
print(s)  # 'Bob' Dilan
- —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–∫–∞–∑—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è : —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Ç–µ, —è–∫ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è.
------
–°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–∞–±–∞–≥–∞—Ç–æ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä. –ó —ó—ó –¥–æ–ø–æ–º–æ–≥–æ—é –º–æ–∂–Ω–∞:
–∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä–æ–∑—Ä—è–¥–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª (–¥–µ—Å—è—Ç–∫–æ–≤—ñ, –≤—ñ—Å—ñ–º–∫–æ–≤—ñ, —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∏—Ä–∏—á–Ω—ñ —Ç–∞ —ñ–Ω.);
print('dec: {:d} hex: {:x} bin: {:b}'.format(15, 15, 15))  # dec: 15 hex: f bin: 1111
–∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–æ—á–Ω—ñ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥—Ä–æ–±–æ–≤–∏—Ö —á–∏—Å–µ–ª (–æ–∫—Ä—É–≥–ª—é–≤–∞—Ç–∏ –¥–æ –≤–∫–∞–∑–∞–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω–∞–∫—ñ–≤);
print('pi: {:0.3}'.format(3.1415))  # pi: 3.14
—è–∫ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∑–Ω–∞–∫ —á–∏—Å–µ–ª:
print('"{}" "{:+}" "{:-}" "{: }"'.format(1, 2, -3, 4))  # "1" "+2" "-3" " 4"
—è–∫ –≤–∏—Ä—ñ–≤–Ω—è—Ç–∏ –ø–æ–ª–æ–∂–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É —ñ —á–∏–º (—è–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏) –¥–æ–ø–æ–≤–Ω–∏—Ç–∏;
print("|{:<10}|{:*^10}|{:>10}|".format('left', 'center', 'right'))  # |left      |**center**|     right|
------
–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
–¢–µ–ª–µ—Ñ–æ–Ω: +380501234567 –î–µ: +380 –∫–æ–¥ –∫—Ä–∞—ó–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω 501234567
–í–≤–∞–∂–∞—î–º–æ, —â–æ –∫–æ–¥ –≤–∞–ª—ñ–¥–Ω–∏–π –∑ –∫–æ–¥–æ–º —ñ –±–µ–∑ –∫–æ–¥—É
"""
# phone_storage = ["380669640547", "0637306465 ", " 380961935171", "632643973", "050832520 ",
#                  "000000000", "48730283918", "986223575", "375297947963", "+38(050)123-32-34", "38(050)123 32 34",
#                  "38(050)123 32 3b"]

# codes_operators = {"067", "068", "096", "097", "098",
#                    "050", "066", "095", "099", "063", "073", "093"}

# from for_import import sanitize_phone, is_valid_phone

# if __name__ == "__main__":
#     print('|{:^14}|{:^12}|'.format('–¢–µ–ª–µ—Ñ–æ–Ω', '–†–µ–∑—É–ª—å—Ç–∞—Ç'))
#     print('|{:^14}|{:^12}|'.format('-' * 13 + ':', ':' + '-' * 10 + ':'))
#     for phone in phone_storage:
#         phone = sanitize_phone(phone)
#         if is_valid_phone(phone):
#             print('|{:>14}|{:^12}|'.format(phone, 'valid'))
#         else:
#             print('|{:>14}|{:^12}|'.format(phone, 'not valid'))

'''
–ú–µ—Ç–æ–¥ format 
'''
## —Ç–∞–±–ª–∏—á–∫–∞ –∑ —á–∏—Å–ª–∞–º–∏, —á–∏—Å–ª–∞–º–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç—ñ, —á–∏—Å–ª–∞–º–∏ –≤ –∫—É–±—ñ
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# header = '|{:^15}|{:^15}|{:^15}|'.format('int', 'int^2', 'int^3')
# separator = '-'*len(header)
# body = ''
# for num in numbers:
#     body += '|{:^15}|{:^15}|{:^15}|\n'.format(num, num**2, num**3)
# table = '\n'.join([separator, header, separator, body, separator])
# print(table)

# # —Ç–∞–±–ª–∏—á–∫–∞ –∑ —á–∏—Å–ª–∞–º–∏ –≤ –¥–µ—Å—è—Ç–∫–æ–≤–æ–º—É, —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∏—Ä–∏—á–Ω–æ–º—É, –≤—ñ—Å—ñ–º–∫–æ–≤–æ–º—É —ñ –¥–≤—ñ–π–∫–æ–≤–æ–º—É —É—è–≤–ª–µ–Ω–Ω—ñ
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# header = '|{:^15}|{:^15}|{:^15}|{:^15}|'.format('int', 'dex', 'oct', 'bin')
# separator = '-'*len(header)
# body = ''
# for num in numbers:
#     body += '|{0:^15d}|{0:^15x}|{0:^15o}|{0:^15b}|\n'.format(num)
# table = '\n'.join([separator, header, separator, body, separator])
# print(table)


'''
–ú–µ—Ç–æ–¥ find 
–ú–µ—Ç–æ–¥ find –ø—Ä–∏–π–º–∞—î —Ç—Ä–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.

message = "Hello my little friend!"

print(message.find("li", 5, 15))  # 9
print(message.find("li", 10, 15))  # -1
print(message.find("li"))  # 9
–ü–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –ø—ñ–¥—Ä—è–¥–æ–∫, —è–∫–∏–π —à—É–∫–∞—Ç–∏–º–µ –º–µ—Ç–æ–¥ find –≤ —Ä—è–¥–∫—É message, –¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–æ—à—É–∫—É –≤ message, –∞ —Ç—Ä–µ—Ç—ñ–π ‚Äî —ñ–Ω–¥–µ–∫—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø–æ—à—É–∫—É. –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞—Ç–∏ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ –ø–æ—à—É–∫ –∑–¥—ñ–π—Å–Ω–∏—Ç—å—Å—è –ø–æ –≤—Å—å–æ–º—É —Ä—è–¥–∫—É. –ú–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—à–æ–≥–æ –∑–±—ñ–≥—É —É —Ä—è–¥–∫—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î -1, —è–∫—â–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
–Ñ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ä—è–¥–∫—É - index. –û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ —è–∫—â–æ index –Ω–µ –∑–Ω–∞–π–¥–µ –ø—ñ–¥—Ä—è–¥–æ–∫, —Ç–æ –≤–∏–∫–ª–∏—á–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è ValueError.

message = "Hello my little friend!"

print(message.index("li", 5, 15))
print(message.index("li", 10, 15))

–í–∏–≤—ñ–¥:
9
Traceback (most recent call last):
  File "e:\WebDir\Works\Python\python-homework-tracks\module-05\src\test.py", line 4, in <module>
    print(message.index("li", 10, 15))
ValueError: substring not found
–Ø–∫—â–æ –≤–∞–º —Ç—Ä–µ–±–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ—à—É–∫ –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ä—è–¥–∫—É –ø—Ä–∞–≤–æ—Ä—É—á, —ñ—Å–Ω—É—é—Ç—å –º–µ—Ç–æ–¥–∏ rfind —Ç–∞ rindex:
message = "Hello my little friend!"

print(message.rfind("li"))  # 9
print(message.rindex("li"))  # 9
'''

# files = ['video.avi', 'audio.mp3', 'document.doc', 'folder']
# for file in files:
#     index = file.find('.')    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫—Ä–∞–ø–æ–∫, —è–∫—â–æ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∏–≤–æ–¥–∏—Ç—å -1
#     suffix = file[index + 1:]    # –¥–æ–¥–∞—î–º–æ 1, —â–æ–± —Å—É—Ñ—ñ–∫—Å –±—É–≤ –±–µ–∑ –ø–∞–ø–∫–∏ –Ω.–ø. .avi
#     print(f'File: {file} Index: {index} Suffix: {suffix}')
   

## –∞–±–æ —â–æ–± –Ω–µ –≤–∏–≤–æ–¥–∏–≤—Å—è -1

# files = ['video.avi', 'audio.mp3', 'document.doc', 'folder']
# for file in files:
#     indx = file.find('.')    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫—Ä–∞–ø–æ–∫
#     if indx != -1:
#         suffix = file[indx + 1:]    # –¥–æ–¥–∞—î–º–æ 1, —â–æ–± —Å—É—Ñ—ñ–∫—Å –±—É–≤ –±–µ–∑ –ø–∞–ø–∫–∏ –Ω.–ø. .avi
#         print(f'File: {file} Index: {indx} Suffix: {suffix}')
#     else: 
#         print(f'File: {file} Suffix: not found')

## –∞–±–æ –∑ –º–µ—Ç–æ–¥–æ–º index —è–∫–∏–π –∫–æ–ª–∏ –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Å–∏–º–≤–æ–ª –≤–∏–¥–∞—î Error 
    
# files = ['video.avi', 'audio.mp3', 'document.doc', 'folder']
# for file in files:
#     try:
#         indx = file.index('.')    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫—Ä–∞–ø–æ–∫
#         suffix = file[indx + 1:]    # –¥–æ–¥–∞—î–º–æ 1, —â–æ–± —Å—É—Ñ—ñ–∫—Å –±—É–≤ –±–µ–∑ –ø–∞–ø–∫–∏ –Ω.–ø. .avi
#         print(f'File: {file} Index: {indx} Suffix: {suffix}')
#     except ValueError:
#         print(f'File: {file} Suffix: not found') 

## —è–∫—â–æ —Ñ–∞–π–ª –∑ –¥–≤–æ–º–∞ –∫—Ä–∞–ø–∫–∞–º–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ rindex –∞–±–æ rfind

# files = ['video.avi', 'audio.mp3', 'document.doc', 'folder', 'backup.tar.gz']
# for file in files:
#     try:
#         indx = file.rindex('.')    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫—Ä–∞–ø–æ–∫
#         suffix = file[indx + 1:]    # –¥–æ–¥–∞—î–º–æ 1, —â–æ–± —Å—É—Ñ—ñ–∫—Å –±—É–≤ –±–µ–∑ —Ä–∞–ø–∫–∏ –Ω.–ø. .avi
#         print(f'File: {file} Index: {indx} Suffix: {suffix}')
#     except ValueError:
#         print(f'File: {file} Suffix: not found') 

'''
–ú–µ—Ç–æ–¥ split 
–ß–∞—Å—Ç–æ –≤–∏–Ω–∏–∫–∞—î —Å–∏—Ç—É–∞—Ü—ñ—è, –∫–æ–ª–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–±–∏—Ç–∏ —Ä—è–¥–æ–∫ –Ω–∞ –ø—ñ–¥—Ä—è–¥–∫–∏ –∑–∞ –¥–µ—è–∫–∏–º —Å–∏–º–≤–æ–ª–æ–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ä–æ–∑–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–µ—á–µ–Ω–Ω—è –ø–æ –ø—Ä–æ–±—ñ–ª—É –ø—ñ—Å–ª—è —Ç–æ—á–∫–∏, –∞–±–æ —Ä–µ—á–µ–Ω–Ω—è –∑–∞ —Å–ª–æ–≤–∞–º–∏. –î–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –º–µ—Ç–æ–¥–æ–º split, —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç –ø—ñ–¥—Ä—è–¥–æ–∫-–º–∞—Ä–∫–µ—Ä, —è–∫–∏–π –±—É–¥–µ –º–µ–∂–µ—é, –∑–∞ —è–∫–æ—é —Ä—è–¥–æ–∫ –±—É–¥–µ —Ä–æ–∑–±–∏—Ç–∏–π –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ —Ä–æ–±–æ—Ç–∏ –º–µ—Ç–æ–¥—É –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤.

message = "Hello, my little friend. Today is a very good day."
words = message.split(" ")
sentences = message.split(". ")
print(words)
print(sentences)
–í–∏–≤—ñ–¥:

['Hello,', 'my', 'little', 'friend.', 'Today', 'is', 'a', 'very', 'good', 'day.']
['Hello, my little friend', 'Today is a very good day.']

–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü—ñ—è —Ä—è–¥–∫—ñ–≤
–í—Å—ñ —Ä—è–¥–∫–∏ –Ω–µ–∑–º—ñ–Ω–Ω—ñ, —Ç–æ–º—É –≤—Å—ñ –º–µ—Ç–æ–¥–∏, —è–∫—ñ —è–∫–æ—Å—å "–º–æ–¥–∏—Ñ—ñ–∫—É—é—Ç—å" —Ä—è–¥–∫–∏, –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å –Ω–æ–≤—ñ —Ä—è–¥–∫–∏, –Ω—ñ—è–∫ –Ω–µ –∑–º—ñ–Ω—é—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ä—è–¥–æ–∫.
–î–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö —Ä—è–¥–∫—ñ–≤ –≤ –æ–¥–∏–Ω —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ join. –ü–æ —Å—É—Ç—ñ —Ü–µ –æ–ø–µ—Ä–∞—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–∞ split:

words = [
    "Hello,",
    "my",
    "little",
    "friend.",
    "Today",
    "is",
    "a",
    "very",
    "good",
    "day.",
]
sentences = ["Hello, my little friend", "Today is a very good day."]

message_from_words = " ".join(words)
message_from_sentences = ". ".join(sentences)

print(message_from_words)  # Hello, my little friend. Today is a very good day.
print(message_from_sentences)  # Hello, my little friend. Today is a very good day.
'''
## –ø–æ–¥—ñ–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏. –º–∞—Ä–∫–µ—Ä –ø–æ–¥—ñ–ª—É –ø—Ä–æ–±—ñ–ª–∏  
# text = 'First sentance. Second sentance. Thirdsentance'
# sentances = text.split('.')        
# print(sentances)      # ['First', 'sentance.', 'Second', 'sentance.', 'Thirdsentance']

## –ø–æ–¥—ñ–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏. –º–∞—Ä–∫–µ—Ä –ø–æ–¥—ñ–ª—É '.' 
# text = 'First sentance. Second sentance. Thirdsentance'
# sentances = text.split('.')        
# print(sentances)        # ['First sentance', ' Second sentance', ' Thirdsentance']

## –ø–æ–¥—ñ–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏. –º–∞—Ä–∫–µ—Ä –ø–æ–¥—ñ–ª—É '.' 
# text = 'First sentance. Second sentance. Thirdsentance'
# sentances = text.split('.') 
# print(s)        # ['First sentance', ' Second sentance', ' Thirdsentance']

## –ø–æ–¥—ñ–ª –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –ø–æ–¥—ñ–ª–µ–Ω–æ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏
# import re
# text = 'First sentance. Second sentance! Thirdsentance?'
# sentances = re.split('[\.\!\?]', text)  
# print(sentances)        # ['First sentance', ' Second sentance', ' Thirdsentance', '']

## —è–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ–¥—ñ–ª–µ–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é \n 
# text = 'First sentance.\nSecond sentance!\nThirdsentance?'

# print(text)
# sentances = text.split('\n')  
# print(sentances) 
# new_text = ' '.join(sentances)  # join –∑–±–∏—Ä–∞—î —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
# print(new_text)              # First sentance. Second sentance! Thirdsentance? 

'''
–ú–µ—Ç–æ–¥ translate
–ú–µ—Ç–æ–¥ translate —É Python –¥–æ–∑–≤–æ–ª—è—î –∑–∞–º—ñ–Ω–∏—Ç–∏ —Å–∏–º–≤–æ–ª —É —Ä—è–¥–∫—É –Ω–∞ —ñ–Ω—à–∏–π –∑ –∫–∞—Ä—Ç–∏ (—Ç–∞–±–ª–∏—Ü—ñ) –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ, –∫–æ—Ç—Ä—É –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏. –Ø–∫—â–æ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ª–æ–≤–Ω–∏–∫, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ ASCII –∫–æ–¥–∏ –∑–∞–º—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤.

–ü—Ä–∏–∫–ª–∞–¥:
replace_dict = {117: "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
–©–æ —Å—Ç–∞–ª–æ—Å—è? –ú–∏ –∑–∞–º—ñ–Ω–∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç—ñ —Å–∏–º–≤–æ–ª "u" –Ω–∞ —Å–∏–º–≤–æ–ª "o". –ó–Ω–∞—á–µ–Ω–Ω—è 117 ‚Äî —Ü–µ ASCII –∫–æ–¥ —Å–∏–º–≤–æ–ª—É 'u', —è–∫–µ, —è–∫ –∑–Ω–∞—î–º–æ, –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó ord("u").

replace_dict = {ord("u"): "o"}
txt = "sun"
print(txt.translate(replace_dict))  # son
–¢–∞–∫–∏–º —á–∏–Ω–æ–º translate() ‚Äì –º–µ—Ç–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫, –¥–µ –¥–µ—è–∫—ñ –∑–∞–¥–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑–∞–º—ñ–Ω—é—é—Ç—å—Å—è –Ω–∞ —Å–∏–º–≤–æ–ª–∏, –æ–ø–∏—Å–∞–Ω—ñ —É —Å–ª–æ–≤–Ω–∏–∫—É, –∞–±–æ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —É —Å–ª–æ–≤–Ω–∏–∫—É/—Ç–∞–±–ª–∏—Ü—ñ, —Å–∏–º–≤–æ–ª –Ω–µ –±—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ. –î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º–µ—Ç–æ–¥ maketrans.

txt = "sun"
my_table = txt.maketrans("u", "o")
print(txt.translate(my_table))  # son
–ú–æ–∂–Ω–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–±—ñ—Ä –¥–ª—è –∑–∞–º—ñ–Ω

txt = "sun"
my_table = txt.maketrans("nus", "mot")
print(txt.translate(my_table))  # tom
–¢—Ä–µ—Ç—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É —Ç–∞–±–ª–∏—Ü—ñ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É—î —Å–∏–º–≤–æ–ª–∏, —è–∫—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ —Ä—è–¥–∫–∞:

txt = "the sun"
my_table = txt.maketrans("nus", "nos", "he t")
print(txt.translate(my_table))  # son
–Ø–∫—â–æ –º–∏ –∑–±–∏—Ä–∞—î–º–æ—Å—è —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ –∫–∏—Ä–∏–ª–∏—Ü—é –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—é, —É –Ω–∞—Å –º–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó 
—Å–ª–æ–≤–∞ "—á–∞—à–∞", —è–∫–µ –º–∞—î –±—É—Ç–∏ "chasha" —ñ –º–∞—î –¥–æ–≤–∂–∏–Ω—É –Ω–∞ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∏ –±—ñ–ª—å—à–µ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è maketrans –≤–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É. –Ø–∫ –±—É—Ç–∏?

–î–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤–±—É–¥–æ–≤–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é zip, —è–∫–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —á–∏—Å–ª–µ–Ω–Ω—ñ –æ–±'—î–∫—Ç–∏, —â–æ —ñ—Ç–µ—Ä—É—é—Ç—å—Å—è –≤ —î–¥–∏–Ω–∏–π –æ–±'—î–∫—Ç                                                                                                                              
–∫–æ—Ä—Ç–µ–∂—ñ–≤, —â–æ —ñ—Ç–µ—Ä—É—î—Ç—å—Å—è, —Ç–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤:

CYRILLIC = ("–∞", "—á", "—à")
LATIN = ("a", "ch", "sh")

TRANSLIT_DICT = {}

for c, l in zip(CYRILLIC, LATIN):
    TRANSLIT_DICT[ord(c)] = l
    TRANSLIT_DICT[ord(c.upper())] = l.upper()

print("—á–∞—à–∞".translate(TRANSLIT_DICT))  # chasha
print("–ß–ê–®–ê".translate(TRANSLIT_DICT))  # CHASHA
–¢–∞–∫ —à–≤–∏–¥–∫–æ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó. –Ø–∫—â–æ —Å–ø–∏—Å–∫–∏ –º–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ –¥–æ–≤–∂–∏–Ω–∏, —Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è zip –ø—Ä–∏–ø–∏–Ω–∏—Ç—å —Ä–æ–±–æ—Ç—É, —â–æ–π–Ω–æ –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è –ø–µ—Ä—à–∏–π —ñ–∑ –Ω–∏—Ö.
'''

# trans_map = {ord('–Ø'): 'Ya', ord('–Ω'): 'n', ord('–∞'): 'a'}  
# ukr_name = "–Ø–Ω–∞"
# last_name = ukr_name.translate(trans_map)
# print(ukr_name, '=', last_name, sep=' ')    # –Ø–Ω–∞ = Yana

## –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É –≤ —Å—Ç—Ä–æ–∫–∞—Ö
# trans_map = {ord('–Ø'): 'Ya', ord('–Ω'): 'n', ord('–∞'): 'a', ord('–æ'): 'o'}  
# text = "Hello W–ærld"                    # o –Ω–µ –ª–∞—Ç–∏–Ω—Å—å–∫–∞ –∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
# index = text.find('World')
# new_index = text.translate(trans_map).find('World')
# print(index)                            # -1
# print(new_index)                        # 6

'''
–†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ 
----------
–£ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ (–≤—ñ–¥ –∞–Ω–≥–ª. Regular expression, —Å–∫–æ—Ä–æ—á–µ–Ω–æ regex –∞–±–æ regexp) ‚Äî —Ü–µ —Ä—è–¥–æ–∫, —è–∫–∏–π –æ–ø–∏—Å—É—î –¥–µ—è–∫—É –º–Ω–æ–∂–∏–Ω—É —Ä—è–¥–∫—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–∞–±–æ—Ä—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª wiki .
–†–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ ‚Äî —Ü–µ –æ–∫—Ä–µ–º–∞ –ø—Å–µ–≤–¥–æ–º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫–∞ —à–∏—Ä–æ–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —É –±–∞–≥–∞—Ç—å–æ—Ö –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —ñ –≤ Python —É —Ç–æ–º—É —á–∏—Å–ª—ñ.
–î–µ—Ç–∞–ª—å–Ω–µ –≤–∏–≤—á–µ–Ω–Ω—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ —Ä–∞–º–∫–∏ —Ü—å–æ–≥–æ –∫—É—Ä—Å—É. –ö–æ–º—É —Ü—ñ–∫–∞–≤–æ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º–∏ –≤–∏—Ä–∞–∑–∞–º–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —á–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏–π –æ–ø–∏—Å –∑ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏ —Ç—É—Ç.
–û—Å–Ω–æ–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ ‚Äî —Ü–µ –ø–æ—à—É–∫ —Ä—è–¥–∫–∞, –∞–±–æ –ø—ñ–¥—Ä—è–¥–∫–∞, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–ø–∏—Å—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞—Ö —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü–µ–π –º–µ—Ö–∞–Ω—ñ–∑–º –º–æ–∂–Ω–∞:
- –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏, —â–æ —Ä—è–¥–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –¥–µ—è–∫–∏–º –≤–∏–º–æ–≥–∞–º (—Ü–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ email);
- —Ä–æ–∑–¥—ñ–ª—è—Ç–∏ —Ä—è–¥–∫–∏ –Ω–∞ –ø—ñ–¥—Ä—è–¥–∫–∏ –∑–∞ –¥–µ—è–∫–∏–º –≤–∏—Ä–∞–∑–æ–º (—Ä–æ–∑–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —É—Å—ñ —Ä–æ–∑–¥—ñ–ª–æ–≤—ñ –∑–Ω–∞–∫–∏, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ —è–∫–∏–π—Å—å –æ–¥–∏–Ω);
- –∑–∞–º—ñ–Ω—é–≤–∞—Ç–∏ –ø—ñ–¥—Ä—è–¥–æ–∫ –≤ —Ä—è–¥–∫—É (–∑–∞–º—ñ–Ω–∏—Ç–∏ —É—Å—ñ —Å–ª–æ–≤–∞, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –Ω–∞ –¥–µ—è–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å);
- –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—ñ–¥—Ä—è–¥–æ–∫ –≤ —Ä—è–¥–∫—É, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏—Ä–∞–∑—É;
–†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑, –∞–±–æ –∫–æ—Ä–æ—Ç–∫–æ "—Ä–µ–≥—É–ª—è—Ä–∫–∞", —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —ñ–∑ –∑–≤–∏—á–∞–π–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, \d –∑–∞–¥–∞—î –±—É–¥—å-—è–∫—É —Ü–∏—Ñ—Ä—É, –∞ \d+ ‚Äî –∑–∞–¥–∞—î –±—É–¥—å-—è–∫—É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å —ñ–∑ –æ–¥–Ω—ñ—î—ó –∞–±–æ –±—ñ–ª—å—à–µ —Ü–∏—Ñ—Ä.
–ì–∞—Ä–Ω–∞ —Å—Ç–∞—Ç—Ç—è –Ω–∞ —Ç–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ —î –Ω–∞ —Ö–∞–±—Ä—ñ, —Ç–∞–º –±–∞–≥–∞—Ç–æ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —ñ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å.
–£ –º–æ–¥—É–ª—ñ re —É Python —î –Ω–∞–±—ñ—Ä —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–º–∏ –≤–∏—Ä–∞–∑–∞–º–∏ —É Python. –©–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è —Ü–∏–º –º–æ–¥—É–ª–µ–º, –π–æ–≥–æ —Ç—Ä–µ–±–∞ —Å–ø–æ—á–∞—Ç–∫—É —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏:

import re

–ú–æ–¥—É–ª—å –ø—Ä–æ–ø–æ–Ω—É—î –Ω–∞–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º —à—É–∫–∞—Ç–∏ —Ä—è–¥–∫–∏ –Ω–∞ –∑–±—ñ–≥:
–§—É–Ω–∫—Ü—ñ—è	    –û–ø–∏—Å
findall	    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫, –∑–∞–±–µ–∑–ø–µ—á—É—î –≤—Å—ñ –∑–±—ñ–≥–∏
search	    –ü–æ–≤–µ—Ä—Ç–∞—î –æ–±'—î–∫—Ç Match, —è–∫—â–æ —É —Ä—è–¥–∫—É —î –∑–±—ñ–≥
split	    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫, –¥–µ —Ä—è–¥–æ–∫ –±—É–≤ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –ø—Ä–∏ –∫–æ–∂–Ω–æ–º—É –∑–±—ñ–≥—É
sub	        –ó–∞–º—ñ–Ω—é—î –æ–¥–∏–Ω –∞–±–æ –∫—ñ–ª—å–∫–∞ –∑–±—ñ–≥—ñ–≤ —Ä—è–¥–∫–æ–º
–ó–∞–≥–∞–ª—å–Ω–∏–º –¥–ª—è —É—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –º–æ–¥—É–ª—è re —î —Ç–µ, —â–æ –ø–µ—Ä—à–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –π–¥–µ —Ä–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫—É.

–ü–æ—à—É–∫ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤–∏—Ä–∞–∑—É –≤–∏–∫–æ–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—è search –º–æ–¥—É–ª—è re. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ —ó—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç Match –∞–±–æ None, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–æ—Å—è.

s = "I am 25 years old"
age = re.search('\d+', s)
print(age)  # <re.Match object; span=(5, 7), match='25'>
–©–æ–± –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –≤–ª–∞—Å–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ–∑ age, –º–æ–∂–Ω–∞ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –π–æ–≥–æ –º–µ—Ç–æ–¥–æ–º group

s = "I am 25 years old."
age = re.search('\d+', s)
print(age.group())  # 25
–§—É–Ω–∫—Ü—ñ—è search ‚Äî "–ª–µ–¥–∞—á–∞" —ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–¥–∞–Ω—ñ–π —É–º–æ–≤—ñ.

–û–±'—î–∫—Ç Match –º–∞—î –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ—à—É–∫ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
- Match.span() –ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–∞ –∫—ñ–Ω—Ü–µ–≤—É –ø–æ–∑–∏—Ü—ñ—ó –∑–±—ñ–≥—É.
- Match.string –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫, –ø–µ—Ä–µ–¥–∞–Ω–∏–π —É —Ñ—É–Ω–∫—Ü—ñ—é,
- Match.group() –ø–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å—Ç–∏–Ω—É —Ä—è–¥–∫–∞, –≤ —è–∫–æ–º—É –±—É–≤ –∑–±—ñ–≥
------------------
'''
'''
–î–æ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é findall. –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º –≤—Ö–æ–¥–∂–µ–Ω–Ω—è–º —à–∞–±–ª–æ–Ω—É, –∞ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à–æ–º—É, —è–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É —Ñ—É–Ω–∫—Ü—ñ—ó search.
–ê–ª–µ —è–∫—â–æ –º–∏ –±–∞–∂–∞—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—Å—ñ –∑–±—ñ–≥–∏ —à–∞–±–ª–æ–Ω—É, –Ω—ñ–∂ —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ findall, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ finditer ‚Äî —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –Ω–∞–¥–∞—î –æ–±'—î–∫—Ç–∏ –∑–±—ñ–≥—ñ–≤ –∑–∞–º—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤.
re.finditer(pattern, string, flags=0)
–§—É–Ω–∫—Ü—ñ—è finditer –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Ç–µ—Ä–∞—Ç–æ—Ä, —â–æ –¥–∞—î –æ–±'—î–∫—Ç–∏ –∑–±—ñ–≥—ñ–≤ –ø–æ –≤—Å—ñ—Ö –∑–±—ñ–≥–∞—Ö, —â–æ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å—Å—è –¥–ª—è —à–∞–±–ª–æ–Ω—É pattern —É —Ä—è–¥–∫—É string. –†—è–¥–æ–∫ —Å–∫–∞–Ω—É—î—Ç—å—Å—è –∑–ª—ñ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –∞ –∑–±—ñ–≥–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è –≤ —Ç–æ–º—É –ø–æ—Ä—è–¥–∫—É, –≤ —è–∫–æ–º—É —ó—Ö –∑–Ω–∞–π—à–ª–∏.
–ù–∞–π–∫—Ä–∞—â–µ ‚Äî —Ü–µ –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ 13 –∑–∞–≤–¥–∞–Ω–Ω—è, –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è email –∞–¥—Ä–µ—Å.
import re
regex = r"[a-zA-Z]{1}[\w\.]+@[a-zA-z]+\.[a-zA-Z]{2,}"
test_str = "Ima.Fool@iana.org Ima.Fool@iana.o 1Fool@iana.org first_last@iana.org first.middle.last@iana.or a@test.com abc111@test.com.net"
matches = re.finditer(regex, test_str)
for match in matches:
    print(f"{match.group()} start: {match.start()} end: {match.end()}")
–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–≤–æ–¥—É:
Ima.Fool@iana.org start: 0 end: 17
Fool@iana.org start: 35 end: 48
first_last@iana.org start: 49 end: 68
first.middle.last@iana.or start: 69 end: 94
abc111@test.com start: 106 end: 121
'''